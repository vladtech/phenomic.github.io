{"head":{"title":"Serverless Framework - AWS Lambda Guide - Functions","menuText":"Functions","menuOrder":5,"description":"How to configure AWS Lambda functions in the Serverless Framework","layout":"Page"},"body":"<!-- DOCS-SITE-LINK:START automatically generated  -->\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/guide/functions)\n<!-- DOCS-SITE-LINK:END -->\n<h1 id=\"functions\"><a href=\"#functions\" class=\"phenomic-HeadingAnchor\">#</a>Functions</h1>\n<p>If you are using AWS as a provider for your <em>Service</em>, all <em>Functions</em> are AWS Lambda functions.</p>\n<h2 id=\"configuration\"><a href=\"#configuration\" class=\"phenomic-HeadingAnchor\">#</a>Configuration</h2>\n<p>All of the AWS Lambda functions in your serverless service can be found in <code>serverless.yml</code> under the <code>functions</code> property.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  runtime:</span> nodejs4<span class=\"hljs-number\">.3</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne</code></pre>\n<p>The <code>handler</code> property points to the file and module containing the code you want to run in your function.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// handler.js</span>\n\n<span class=\"hljs-built_in\">module</span>.exports.functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, context, callback</span>) </span>{}</code></pre>\n<p>You can add as many functions as you want within this property.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  runtime:</span> nodejs4<span class=\"hljs-number\">.3</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne\n<span class=\"hljs-attr\">    description:</span> optional description for your Lambda\n<span class=\"hljs-attr\">  functionTwo:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionTwo\n<span class=\"hljs-attr\">  functionThree:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionThree</code></pre>\n<p>Your functions can either inherit their settings from the <code>provider</code> property.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  runtime:</span> nodejs4<span class=\"hljs-number\">.3</span>\n<span class=\"hljs-attr\">  memorySize:</span> <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\"># inherited value</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne</code></pre>\n<p>Or you can specify properties at the function level.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  runtime:</span> nodejs4<span class=\"hljs-number\">.3</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne\n<span class=\"hljs-attr\">    memorySize:</span> <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\"># function specific</span></code></pre>\n<h2 id=\"permissions\"><a href=\"#permissions\" class=\"phenomic-HeadingAnchor\">#</a>Permissions</h2>\n<p>Every AWS Lambda function needs permission to interact with other AWS infrastructure resources within your account.  These permissions are set via an AWS IAM Role.  You can set permission policy statements within this role via the <code>provider.iamRoleStatements</code> property.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  runtime:</span> nodejs4<span class=\"hljs-number\">.3</span>\n<span class=\"hljs-attr\">  iamRoleStatements:</span> <span class=\"hljs-comment\"># permissions for all of your functions can be set here</span>\n<span class=\"hljs-attr\">    - Effect:</span> Allow\n<span class=\"hljs-attr\">      Action:</span> <span class=\"hljs-comment\"># Gives permission to DynamoDB tables in a specific region</span>\n<span class=\"hljs-attr\">        - dynamodb:</span>DescribeTable\n<span class=\"hljs-attr\">        - dynamodb:</span>Query\n<span class=\"hljs-attr\">        - dynamodb:</span>Scan\n<span class=\"hljs-attr\">        - dynamodb:</span>GetItem\n<span class=\"hljs-attr\">        - dynamodb:</span>PutItem\n<span class=\"hljs-attr\">        - dynamodb:</span>UpdateItem\n<span class=\"hljs-attr\">        - dynamodb:</span>DeleteItem\n<span class=\"hljs-attr\">      Resource:</span> <span class=\"hljs-string\">\"arn:aws:dynamodb:us-east-1:*:*\"</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne\n<span class=\"hljs-attr\">    memorySize:</span> <span class=\"hljs-number\">512</span></code></pre>\n<p>Another example:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> myService\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  iamRoleStatements:</span>\n<span class=\"hljs-attr\">      -  Effect:</span> <span class=\"hljs-string\">\"Allow\"</span>\n<span class=\"hljs-attr\">         Action:</span>\n<span class=\"hljs-bullet\">           -</span> <span class=\"hljs-string\">\"s3:ListBucket\"</span>\n<span class=\"hljs-attr\">         Resource:</span> { <span class=\"hljs-string\">\"Fn::Join\"</span> : [<span class=\"hljs-string\">\"\"</span>, [<span class=\"hljs-string\">\"arn:aws:s3:::\"</span>, { <span class=\"hljs-string\">\"Ref\"</span> : <span class=\"hljs-string\">\"ServerlessDeploymentBucket\"</span>} ] ] } <span class=\"hljs-comment\"># You can put CloudFormation syntax in here.  No one will judge you.  Remember, this all gets translated to CloudFormation.</span>\n<span class=\"hljs-attr\">      -  Effect:</span> <span class=\"hljs-string\">\"Allow\"</span>\n<span class=\"hljs-attr\">         Action:</span>\n<span class=\"hljs-bullet\">           -</span> <span class=\"hljs-string\">\"s3:PutObject\"</span>\n<span class=\"hljs-attr\">         Resource:</span>\n<span class=\"hljs-attr\">           Fn:</span>:Join:\n<span class=\"hljs-bullet\">             -</span> <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-bullet\">             -</span> - <span class=\"hljs-string\">\"arn:aws:s3:::\"</span>\n<span class=\"hljs-bullet\">               -</span> <span class=\"hljs-string\">\"Ref\"</span> : <span class=\"hljs-string\">\"ServerlessDeploymentBucket\"</span>\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  functionOne:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.functionOne\n<span class=\"hljs-attr\">    memorySize:</span> <span class=\"hljs-number\">512</span></code></pre>\n<p>You can also use an existing IAM role by adding your IAM Role ARN in the <code>iamRoleARN</code> property. For example:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">service:</span> new-service\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  iamRoleARN:</span> arn:aws:iam::YourAccountNumber:role/YourIamRole</code></pre>\n<p>Support for separate IAM Roles per function is coming soon.</p>\n<h2 id=\"vpc-configuration\"><a href=\"#vpc-configuration\" class=\"phenomic-HeadingAnchor\">#</a>VPC Configuration</h2>\n<p>You can add VPC configuration to a specific function in <code>serverless.yml</code> by adding a <code>vpc</code> object property in the function configuration. This object should contain the <code>securityGroupIds</code> and <code>subnetIds</code> array properties needed to construct VPC for this function. Here's an example configuration:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n<span class=\"hljs-attr\">service:</span> service-name\n<span class=\"hljs-attr\">provider:</span> aws\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  hello:</span>\n<span class=\"hljs-attr\">    handler:</span> handler.hello\n<span class=\"hljs-attr\">    vpc:</span>\n<span class=\"hljs-attr\">      securityGroupIds:</span>\n<span class=\"hljs-bullet\">        -</span> securityGroupId1\n<span class=\"hljs-bullet\">        -</span> securityGroupId2\n<span class=\"hljs-attr\">      subnetIds:</span>\n<span class=\"hljs-bullet\">        -</span> subnetId1\n<span class=\"hljs-bullet\">        -</span> subnetId2</code></pre>\n<p>Or if you want to apply VPC configuration to all functions in your service, you can add the configuration to the higher level <code>provider</code> object, and overwrite these service level config at the function level. For example:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n<span class=\"hljs-attr\">service:</span> service-name\n<span class=\"hljs-attr\">provider:</span>\n<span class=\"hljs-attr\">  name:</span> aws\n<span class=\"hljs-attr\">  vpc:</span>\n<span class=\"hljs-attr\">    securityGroupIds:</span>\n<span class=\"hljs-bullet\">      -</span> securityGroupId1\n<span class=\"hljs-bullet\">      -</span> securityGroupId2\n<span class=\"hljs-attr\">    subnetIds:</span>\n<span class=\"hljs-bullet\">      -</span> subnetId1\n<span class=\"hljs-bullet\">      -</span> subnetId2\n\n<span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  hello:</span> <span class=\"hljs-comment\"># this function will overwrite the service level vpc config above</span>\n<span class=\"hljs-attr\">    handler:</span> handler.hello\n<span class=\"hljs-attr\">    vpc:</span>\n<span class=\"hljs-attr\">      securityGroupIds:</span>\n<span class=\"hljs-bullet\">        -</span> securityGroupId1\n<span class=\"hljs-bullet\">        -</span> securityGroupId2\n<span class=\"hljs-attr\">      subnetIds:</span>\n<span class=\"hljs-bullet\">        -</span> subnetId1\n<span class=\"hljs-bullet\">        -</span> subnetId2\n<span class=\"hljs-attr\">  users:</span> <span class=\"hljs-comment\"># this function will inherit the service level vpc config above</span>\n<span class=\"hljs-attr\">    handler:</span> handler.users</code></pre>\n<p>Then, when you run <code>serverless deploy</code>, VPC configuration will be deployed along with your lambda function.</p>\n<h2 id=\"environment-variables\"><a href=\"#environment-variables\" class=\"phenomic-HeadingAnchor\">#</a>Environment Variables</h2>\n<p>We're working on great Environment Variable support. Until then, you'll be able to use the following tools for different languages to set environment variables and make them available to your code.</p>\n<h2 id=\"javascript\"><a href=\"#javascript\" class=\"phenomic-HeadingAnchor\">#</a>Javascript</h2>\n<p>You can use <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> to load files with environment variables. Those variables can be set during your CI process or locally and then packaged and deployed together with your function code.</p>\n<h2 id=\"python\"><a href=\"#python\" class=\"phenomic-HeadingAnchor\">#</a>Python</h2>\n<p>You can use <a href=\"https://github.com/theskumar/python-dotenv\">python-dotenv</a> to load files with environment variables. Those variables can be set during your CI process or locally and then packaged and deployed together with your function code.</p>\n<h2 id=\"java\"><a href=\"#java\" class=\"phenomic-HeadingAnchor\">#</a>Java</h2>\n<p>For Java the easiest way to set up environment like configuration is through <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/properties.html\">property files</a>. While those will not be available as environment variables they are very commonly used configuration mechanisms throughout Java.</p>\n<h2 id=\"log-group-resources\"><a href=\"#log-group-resources\" class=\"phenomic-HeadingAnchor\">#</a>Log Group Resources</h2>\n<p>By default, the framework does not create LogGroups for your Lambdas. However this behavior will be deprecated soon and we'll be adding CloudFormation LogGroups resources as part of the stack. This makes it easy to clean up your log groups in the case you remove your service, and make the lambda IAM permissions much more specific and secure.</p>\n<p>To opt in for this feature now to avoid breaking changes later, add the following to your provider config in serverless.yml:</p>\n<pre><code>provider:\n  cfLogs: true\n</code></pre>\n<p>If you get a CloudFormation error saying that log group already exists, you have to remove it first from AWS console, then deploy, otherwise for new services this should work out of the box.</p>\n","__filename":"providers\\aws\\guide\\functions.md","__url":"/providers/aws/guide/functions/","__resourceUrl":"/providers/aws/guide/functions/index.html","__dataUrl":"/providers/aws/guide/functions/index.html.06c90a63d85bdd20b564df5861b2ae62.json"}