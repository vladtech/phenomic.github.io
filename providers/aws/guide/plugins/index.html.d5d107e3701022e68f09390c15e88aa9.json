{"head":{"title":"Serverless Framework - AWS Lambda Guide - Plugins","menuText":"Plugins","menuOrder":12,"description":"How to install and create Plugins to extend or overwrite the functionality of the Serverless Framework","layout":"Page"},"body":"<!-- DOCS-SITE-LINK:START automatically generated  -->\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/guide/plugins)\n<!-- DOCS-SITE-LINK:END -->\n<h1 id=\"plugins\"><a href=\"#plugins\" class=\"phenomic-HeadingAnchor\">#</a>Plugins</h1>\n<p>A Plugin is custom Javascript code that creates new or extends existing commands within the Serverless Framework.  The Serverless Framework is merely a group of Plugins that are provided in the core.  If you or your organization have a specific workflow, install a pre-written Plugin or write a plugin to customize the Framework to your needs.  External Plugins are written exactly the same way as the core Plugins.</p>\n<h2 id=\"installing-plugins\"><a href=\"#installing-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Installing Plugins</h2>\n<p>External Plugins are added on a per service basis and are not applied globally.  Make sure you are in your Service's root directory, then install the corresponding Plugin with the help of NPM:</p>\n<pre><code>npm install --save custom-serverless-plugin\n</code></pre>\n<p>We need to tell Serverless that we want to use the plugin inside our service. We do this by adding the name of the Plugin to the <code>plugins</code> section in the <code>serverless.yml</code> file.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml file</span>\n\n<span class=\"hljs-attr\">plugins:</span>\n<span class=\"hljs-bullet\">  -</span> custom-serverless-plugin</code></pre>\n<p>Plugins might want to add extra information which should be accessible to Serverless. The <code>custom</code> section in the <code>serverless.yml</code> file is the place where you can add necessary\nconfigurations for your plugins (the plugins author / documentation will tell you if you need to add anything there):</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">plugins:</span>\n<span class=\"hljs-bullet\">  -</span> custom-serverless-plugin\n\n<span class=\"hljs-attr\">custom:</span>\n<span class=\"hljs-attr\">  customkey:</span> customvalue</code></pre>\n<h2 id=\"service-local-plugin\"><a href=\"#service-local-plugin\" class=\"phenomic-HeadingAnchor\">#</a>Service local plugin</h2>\n<p>If you are working on a plugin or have a plugin that is just designed for one project you can add them to the <code>.serverless_plugins</code> directory at the root of your service, and in the <code>plugins</code> array in <code>serverless.yml</code>.</p>\n<p>The plugin will be loaded based on being named <code>custom-serverless-plugin.js</code> or <code>custom-serverless-plugin\\index.js</code> in the root of <code>.serverless_plugins</code> folder.</p>\n<h3 id=\"load-order\"><a href=\"#load-order\" class=\"phenomic-HeadingAnchor\">#</a>Load Order</h3>\n<p>Keep in mind that the order you define your plugins matters. When Serverless loads all the core plugins and then the custom plugins in the order you've defined them.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># serverless.yml</span>\n\n<span class=\"hljs-attr\">plugins:</span>\n<span class=\"hljs-bullet\">  -</span> plugin1\n<span class=\"hljs-bullet\">  -</span> plugin2</code></pre>\n<p>In this case <code>plugin1</code> is loaded before <code>plugin2</code>.</p>\n<h2 id=\"writing-plugins\"><a href=\"#writing-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Writing Plugins</h2>\n<h3 id=\"concepts\"><a href=\"#concepts\" class=\"phenomic-HeadingAnchor\">#</a>Concepts</h3>\n<h4 id=\"plugin\"><a href=\"#plugin\" class=\"phenomic-HeadingAnchor\">#</a>Plugin</h4>\n<p>Code which defines <em>Commands</em>, any <em>Events</em> within a <em>Command</em>, and any <em>Hooks</em> assigned to an <em>Lifecycle Event</em>.</p>\n<ul>\n<li>\n<p>Command // CLI configuration, commands, subcommands, options</p>\n<ul>\n<li>\n<p>LifecycleEvent(s) // Events that happen sequentially when the command is run</p>\n<ul>\n<li>Hook(s)  // Code that runs when a Lifecycle Event happens during a Command</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"command\"><a href=\"#command\" class=\"phenomic-HeadingAnchor\">#</a>Command</h4>\n<p>A CLI <em>Command</em> that can be called by a user, e.g. <code>serverless deploy</code>.  A Command has no logic, but simply defines the CLI configuration (e.g. command, subcommands, parameters) and the <em>Lifecycle Events</em> for the command. Every command defines its own lifecycle events.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPlugin</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">deploy</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'resources'</span>,\n          <span class=\"hljs-string\">'functions'</span>\n        ]\n      },\n    };\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = MyPlugin;</code></pre>\n<h4 id=\"lifecycle-events\"><a href=\"#lifecycle-events\" class=\"phenomic-HeadingAnchor\">#</a>Lifecycle Events</h4>\n<p>Events that fire sequentially during a Command.  The above example list two Events.  However, for each Event, and additional <code>before</code> and <code>after</code> event is created.  Therefore, six Events exist in the above example:</p>\n<ul>\n<li><code>before:deploy:resources</code></li>\n<li><code>deploy:resources</code></li>\n<li><code>after:deploy:resources</code></li>\n<li><code>before:deploy:functions</code></li>\n<li><code>deploy:functions</code></li>\n<li><code>after:deploy:functions</code></li>\n</ul>\n<p>The name of the command in front of lifecycle events when they are used for Hooks.</p>\n<h4 id=\"hooks\"><a href=\"#hooks\" class=\"phenomic-HeadingAnchor\">#</a>Hooks</h4>\n<p>A Hook binds code to any lifecycle event from any command.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Deploy</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">deploy</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'resources'</span>,\n          <span class=\"hljs-string\">'functions'</span>\n        ]\n      },\n    };\n\n    <span class=\"hljs-keyword\">this</span>.hooks = {\n      <span class=\"hljs-string\">'before:deploy:resources'</span>: <span class=\"hljs-keyword\">this</span>.beforeDeployResources,\n      <span class=\"hljs-string\">'deploy:resources'</span>: <span class=\"hljs-keyword\">this</span>.deployResources,\n      <span class=\"hljs-string\">'after:deploy:functions'</span>: <span class=\"hljs-keyword\">this</span>.afterDeployFunctions\n    };\n  }\n\n  beforeDeployResources() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Before Deploy Resources'</span>);\n  }\n\n  deployResources() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Deploy Resources'</span>);\n  }\n\n  afterDeployFunctions() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'After Deploy Functions'</span>);\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = Deploy;</code></pre>\n<h3 id=\"nesting-commands\"><a href=\"#nesting-commands\" class=\"phenomic-HeadingAnchor\">#</a>Nesting Commands</h3>\n<p>You can also nest commands, e.g. if you want to provide a command <code>serverless deploy single</code>. Those nested commands have their own lifecycle events and do not inherit them from their parents.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPlugin</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">deploy</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'resources'</span>,\n          <span class=\"hljs-string\">'functions'</span>\n        ],\n        <span class=\"hljs-attr\">commands</span>: {\n          <span class=\"hljs-attr\">function</span>: {\n            <span class=\"hljs-attr\">lifecycleEvents</span>: [\n              <span class=\"hljs-string\">'package'</span>,\n              <span class=\"hljs-string\">'deploy'</span>\n            ],\n          },\n        },\n      },\n    }\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = MyPlugin;</code></pre>\n<h3 id=\"defining-options\"><a href=\"#defining-options\" class=\"phenomic-HeadingAnchor\">#</a>Defining Options</h3>\n<p>Each (sub)command can have multiple Options.</p>\n<p>Options are passed in with a double dash (<code>--</code>) like this: <code>serverless function deploy --function functionName</code>.</p>\n<p>Option Shortcuts are passed in with a single dash (<code>-</code>) like this: <code>serverless function deploy -f functionName</code>.</p>\n<p>The <code>options</code> object will be passed in as the second parameter to the constructor of your plugin.  </p>\n<p>In it, you can optionally add a <code>shortcut</code> property, as well as a <code>required</code> property.  The Framework will return an error if a <code>required</code> Option is not included.</p>\n<p><strong>Note:</strong> At this time, the Serverless Framework does not use parameters.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Deploy</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(serverless, options) {\n    <span class=\"hljs-keyword\">this</span>.serverless = serverless;\n    <span class=\"hljs-keyword\">this</span>.options = options;\n\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">deploy</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'functions'</span>\n        ],\n        <span class=\"hljs-attr\">options</span>: {\n          <span class=\"hljs-attr\">function</span>: {\n            <span class=\"hljs-attr\">usage</span>: <span class=\"hljs-string\">'Specify the function you want to deploy (e.g. \"--function myFunction\")'</span>,\n            <span class=\"hljs-attr\">shortcut</span>: <span class=\"hljs-string\">'f'</span>,\n            <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>\n          }\n        }\n      },\n    };\n\n    <span class=\"hljs-keyword\">this</span>.hooks = {\n      <span class=\"hljs-string\">'deploy:functions'</span>: <span class=\"hljs-keyword\">this</span>.deployFunction.bind(<span class=\"hljs-keyword\">this</span>)\n    }\n  }\n\n  deployFunction() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Deploying function: '</span>, <span class=\"hljs-keyword\">this</span>.options.function);\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = Deploy;</code></pre>\n<h3 id=\"provider-specific-plugins\"><a href=\"#provider-specific-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Provider Specific Plugins</h3>\n<p>Plugins can be provider specific which means that they are bound to a provider.</p>\n<p><strong>Note:</strong> Binding a plugin to a provider is optional. Serverless will always consider your plugin if you don't specify a <code>provider</code>.</p>\n<p>The provider definition should be added inside the plugins constructor:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderDeploy</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(serverless, options) {\n    <span class=\"hljs-keyword\">this</span>.serverless = serverless;\n    <span class=\"hljs-keyword\">this</span>.options = options;\n\n    <span class=\"hljs-comment\">// set the providers name here</span>\n    <span class=\"hljs-keyword\">this</span>.provider = <span class=\"hljs-string\">'providerName'</span>;\n\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">deploy</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'functions'</span>\n        ],\n        <span class=\"hljs-attr\">options</span>: {\n          <span class=\"hljs-attr\">function</span>: {\n            <span class=\"hljs-attr\">usage</span>: <span class=\"hljs-string\">'Specify the function you want to deploy (e.g. \"--function myFunction\")'</span>,\n            <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>\n          }\n        }\n      },\n    };\n\n    <span class=\"hljs-keyword\">this</span>.hooks = {\n      <span class=\"hljs-string\">'deploy:functions'</span>: <span class=\"hljs-keyword\">this</span>.deployFunction.bind(<span class=\"hljs-keyword\">this</span>)\n    }\n  }\n\n  deployFunction() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Deploying function: '</span>, <span class=\"hljs-keyword\">this</span>.options.function);\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = ProviderDeploy;</code></pre>\n<p>The Plugin's functionality will now only be executed when the Serverless Service's provider matches the provider name which is defined inside the plugins constructor.</p>\n<h3 id=\"serverless-instance\"><a href=\"#serverless-instance\" class=\"phenomic-HeadingAnchor\">#</a>Serverless Instance</h3>\n<p>The <code>serverless</code> instance which enables access to global service config during runtime is passed in as the first parameter to the plugin constructor.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPlugin</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(serverless, options) {\n    <span class=\"hljs-keyword\">this</span>.serverless = serverless;\n    <span class=\"hljs-keyword\">this</span>.options = options;\n\n    <span class=\"hljs-keyword\">this</span>.commands = {\n      <span class=\"hljs-attr\">log</span>: {\n        <span class=\"hljs-attr\">lifecycleEvents</span>: [\n          <span class=\"hljs-string\">'serverless'</span>\n        ],\n      },\n    };\n\n    <span class=\"hljs-keyword\">this</span>.hooks = {\n      <span class=\"hljs-string\">'log:serverless'</span>: <span class=\"hljs-keyword\">this</span>.logServerless.bind(<span class=\"hljs-keyword\">this</span>)\n    }\n  }\n\n  logServerless() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Serverless instance: '</span>, <span class=\"hljs-keyword\">this</span>.serverless);\n  }\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = MyPlugin;</code></pre>\n<h3 id=\"command-naming\"><a href=\"#command-naming\" class=\"phenomic-HeadingAnchor\">#</a>Command Naming</h3>\n<p>Command names need to be unique. If we load two commands and both want to specify the same command (e.g. we have an integrated command <code>deploy</code> and an external command also wants to use <code>deploy</code>) the Serverless CLI will print an error and exit. If you want to have your own <code>deploy</code> command you need to name it something different like <code>myCompanyDeploy</code> so they don't clash with existing plugins.</p>\n","__filename":"providers\\aws\\guide\\plugins.md","__url":"/providers/aws/guide/plugins/","__resourceUrl":"/providers/aws/guide/plugins/index.html","__dataUrl":"/providers/aws/guide/plugins/index.html.d5d107e3701022e68f09390c15e88aa9.json"}