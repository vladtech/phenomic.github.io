{"head":{"title":"Serverless Framework - AWS Lambda Events - SNS","menuText":"SNS","menuOrder":5,"description":"Setting up AWS SNS Events with AWS Lambda via the Serverless Framework","layout":"Page"},"body":"<!-- DOCS-SITE-LINK:START automatically generated  -->\n### [Read this on the main serverless docs site](https://www.serverless.com/framework/docs/providers/aws/events/sns)\n<!-- DOCS-SITE-LINK:END -->\n<h1 id=\"sns\"><a href=\"#sns\" class=\"phenomic-HeadingAnchor\">#</a>SNS</h1>\n<p>In the following example we create a new SNS topic with the name <code>dispatch</code> which is bound to the <code>dispatcher</code> function. The function will be called every time a message is sent to the <code>dispatch</code> topic.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  dispatcher:</span>\n<span class=\"hljs-attr\">    handler:</span> dispatcher.dispatch\n<span class=\"hljs-attr\">    events:</span>\n<span class=\"hljs-attr\">      - sns:</span> dispatch</code></pre>\n<p>You're also able to add the same SNS topic to multiple functions:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  dispatcher:</span>\n<span class=\"hljs-attr\">    handler:</span> dispatcher.dispatch\n<span class=\"hljs-attr\">    events:</span>\n<span class=\"hljs-attr\">      - sns:</span> dispatch\n<span class=\"hljs-attr\">  dispatcher2:</span>\n<span class=\"hljs-attr\">    handler:</span> dispatcher2.dispatch\n<span class=\"hljs-attr\">    events:</span>\n<span class=\"hljs-attr\">      - sns:</span> dispatch</code></pre>\n<p>This will run both functions for a message sent to the dispatch topic.</p>\n<h2 id=\"creating-the-permission-for-a-pre-existing-topic\"><a href=\"#creating-the-permission-for-a-pre-existing-topic\" class=\"phenomic-HeadingAnchor\">#</a>Creating the permission for a pre-existing topic</h2>\n<p>If you want to run a function from a preexisting SNS topic you need to connect the topic to a Lambda function yourself. By defining a topic arn inside of the SNS topic we're able to set up the Lambda Permission so SNS is allowed to call this function.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  dispatcher:</span>\n<span class=\"hljs-attr\">    handler:</span> dispatcher.dispatch\n<span class=\"hljs-attr\">    events:</span>\n<span class=\"hljs-attr\">      - sns:</span> arn:xxx</code></pre>\n<p>Just make sure your function is already subscribed to the topic, as there's no way to add subscriptions to pre-existing topics in CF. The framework will just give permission to SNS to invoke the function.</p>\n<h2 id=\"setting-a-display-name\"><a href=\"#setting-a-display-name\" class=\"phenomic-HeadingAnchor\">#</a>Setting a display name</h2>\n<p>This event definition ensures that the <code>aggregator</code> function get's called every time a message is sent to the\n<code>aggregate</code> topic. <code>Data aggregation pipeline</code> will be shown in the AWS console so that the user can understand what the\nSNS topic is used for.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">functions:</span>\n<span class=\"hljs-attr\">  aggregator:</span>\n<span class=\"hljs-attr\">    handler:</span> aggregator.handler\n<span class=\"hljs-attr\">    events:</span>\n<span class=\"hljs-attr\">      - sns:</span>\n<span class=\"hljs-attr\">          topicName:</span> aggregate\n<span class=\"hljs-attr\">          displayName:</span> Data aggregation pipeline</code></pre>\n","__filename":"providers\\aws\\events\\sns.md","__url":"/providers/aws/events/sns/","__resourceUrl":"/providers/aws/events/sns/index.html","__dataUrl":"/providers/aws/events/sns/index.html.cbec6cdaa4de3488cdae9369747aa0a5.json"}